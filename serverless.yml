service: aws-evently
frameworkVersion: '3'

plugins:
  - serverless-iam-roles-per-function
  - '@khasty720/serverless-dynamodb-local'
  - serverless-offline
  - serverless-export-env
provider:
  name: aws
  region: eu-west-2
  stage: ${opt:stage, self:custom.default_stage}
  runtime: nodejs18.x
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    SERVICE: ${self:service}
    httpApiGatewayEndpointId: !Ref HttpApi
  httpApi:
    cors: true


custom:
  tableName: ${self:service}-${self:provider.stage}
  description: Evently. The apps for events
  default_stage: local
  bucketName: ${self:service}-public-photos-${sls:stage}
  
  serverless-offline:
    host: 'localhost'
    httpPort: 4000
    lambdaPort: 4001
    allowCache: true
    noPrependStageInUrl: true
    port: 4000 

  dynamodb:
    stages:
      - local
    start:
      host: 127.0.0.1
      port: 8000
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      convertEmptyValues: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
          - "s3:*"
          Resource: "arn:aws:s3:::${self:service}-public-photos-${sls:stage}" 
        - Effect: Allow
          Action:
          - "cognito-idp:AdminInitiateAuth"
          - "cognito-idp:AdminCreateUser"
          - "cognito-idp:AdminSetUserPassword"
          Resource: "*" 
        
functions:

  join: 
    name: ${self:service}-${self:provider.stage}-join
    handler: src/lambdas/join/function.handler
    description: register to ${self:service}-${self:provider.stage}
    memorySize: 128
    events:
      - httpApi:
          method: POST
          path: /join
    environment:
      USER_POOL_ID:
        Ref: UserPool
  login: 
    name: ${self:service}-${self:provider.stage}-login
    handler: src/lambdas/login/function.handler
    description: register to ${self:service}-${self:provider.stage}
    memorySize: 128
    events:
      - httpApi:
          method: POST
          path: /login
    environment:
      USER_POOL_ID:
        Ref: UserPool
      CLIENT_ID: 
        Ref: UserPoolClient  

  savePhoto:
    name: ${self:service}-${self:provider.stage}-save-photo
    handler: src/lambdas/savePhoto/function.handler
    description: Save photo in s3
    memorySize: 256
    timeout: 20
    environment:
      BUCKET_NAME: ${self:custom.bucketName}
    events:
      - httpApi:
          method: POST
          path: /photo

  createItem:
    name: ${self:service}-${self:provider.stage}-create-item
    handler: src/lambdas/createItem/function.handler
    description: Create Item in repository
    memorySize: 128
    timeout: 25
    environment:
      tableName: ${self:custom.tableName}
      BUCKET_NAME: ${self:custom.bucketName}
    events:
      - httpApi:
          method: POST
          path: /item
    iamRoleStatements:
      - Sid: DynamoDBReadWrite
        Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: !GetAtt eventlyTable.Arn
  getItem:
    name: ${self:service}-${self:provider.stage}-get-item-by-id
    handler: src/lambdas/getItem/function.handler
    description: Get an Item from repository.
    memorySize: 128
    timeout: 5
    environment:
      tableName: ${self:custom.tableName}
    events:
      - httpApi:
          path: /item/{id}
          method: GET
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'DynamoDB:GetItem'
        Resource: !GetAtt eventlyTable.Arn
  getItemsByOwner:
      name: ${self:service}-${self:provider.stage}-get-items-by-owner
      handler: src/lambdas/getItemsById/function.handler
      description: Get Items from repository by eventOwner.
      memorySize: 128
      timeout: 10
      environment:
        tableName: ${self:custom.tableName}
        indexName: eventOwnerId
        field: eventOwnerId
      events:
        - httpApi:
            path: /items/byOwner/{id}
            method: GET
      iamRoleStatements:
        - Effect: 'Allow'
          Action:
            - 'DynamoDB:GetItem'
          Resource: !GetAtt eventlyTable.Arn
  getItemsByUser:
      name: ${self:service}-${self:provider.stage}-get-items-by-event-owner
      handler: src/lambdas/getItemsById/function.handler
      description: Get Items from repository by eventOwner.
      memorySize: 128
      timeout: 10
      environment:
        tableName: ${self:custom.tableName}
        indexName: userId
        field: userId
      events:
        - httpApi:
            path: /items/byUser/{id}
            method: GET
      iamRoleStatements:
        - Effect: 'Allow'
          Action:
            - 'DynamoDB:GetItem'
          Resource: !GetAtt eventlyTable.Arn
  DeleteItem:
      name: ${self:service}-${self:provider.stage}-delete-item
      handler: src/lambdas/deleteItem/function.handler
      description: Delete Item from repository.
      memorySize: 128
      timeout: 5
      environment:
        tableName: ${self:custom.tableName}
      events:
        - httpApi:
            path: /item/{id}
            method: DELETE
      iamRoleStatements:
        - Effect: 'Allow'
          Action:
            - 'DynamoDB:DeleteItem'
          Resource: !GetAtt eventlyTable.Arn    
package:
  individually: true
  patterns:
    # include
    - src/**
    
    # exclude
    - '!*'
    - '.dynamodb/**'
    - '.husky/**'
    - '!__tests__/**'

resources:
  Description: ${self:custom.description}    

  Resources:

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName:  ${self:service}-${sls:stage}-UserPool
        AccountRecoverySetting: 
          RecoveryMechanisms: 
            - Name: verified_email
              Priority: 1
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email            
        Schema:
          - Name: "family_name"
            Required: true
            Mutable: true
          - Name: "name"
            Required: true
            Mutable: true
        Policies:
            PasswordPolicy:
              MinimumLength: 8
        

    UserPoolClient:
      Type : "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName:  ${self:service}-${sls:stage}-UserPoolClient
        UserPoolId: 
          Ref: UserPool
        AccessTokenValidity: 10
        IdTokenValidity: 10
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"


    eventlyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: eventOwnerId
            AttributeType: S  
          - AttributeName: userId
            AttributeType: S  
          - AttributeName: eventDateAndTime
            AttributeType: S    
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE  
        BillingMode: PAY_PER_REQUEST     
        Tags:
          - Key: Application
            Value: ${self:service}
          - Key: Stage
            Value: ${self:provider.stage}
          - Key: StackName
            Value: !Ref AWS::StackId

        GlobalSecondaryIndexes:
          - IndexName: eventOwnerId
            KeySchema:
              - AttributeName: eventOwnerId
                KeyType: HASH
              - AttributeName: eventDateAndTime
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          
          - IndexName: userId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: eventDateAndTime
                KeyType: RANGE
            Projection:
              ProjectionType: ALL   
    
    PhotoBucket: 
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-public-photos-${sls:stage}
        
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
    PhotoBucketAllowPublicReadPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PhotoBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement: 
            - Effect: Allow
              Action: 
                - "s3:GetObject"
              Resource: 
                - !Join ['/', [!GetAtt [PhotoBucket, Arn], '*']]
              Principal: "*"    