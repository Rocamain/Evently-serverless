service: aws-evently
frameworkVersion: '3'

plugins:
  - serverless-iam-roles-per-function
  - '@khasty720/serverless-dynamodb-local'
  - serverless-offline

provider:
  name: aws
  region: eu-west-2
  stage: local
  runtime: nodejs18.x
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    SERVICE: ${self:service}
    
custom:
  tableName: ${self:service}-${self:provider.stage}
  description: Envently. The apps for events
  
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3001
    allowCache: true
    noPrependStageInUrl: true

  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
      convertEmptyValues: true

    
functions:
  createItem:
    handler: src/lambdas/createItem/function.handler
    description: Create Item in repository
    memorySize: 128
    timeout: 5
    environment:
      tableName: ${self:custom.tableName}
    events:
      - httpApi:
          method: POST
          path: /item
    iamRoleStatements:
      - Sid: DynamoDBReadWrite
        Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: 
          - !GetAtt Table.Arn
  getItem:
    name: 'event-get'
    handler: src/lambdas/getItem/function.handler
    description: Get an Item from repository.
    memorySize: 128
    timeout: 5
    environment:
      tableName: ${self:custom.tableName}
    events:
      - http:
          path: item/{id}
          method: GET
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'DynamoDB:GetItem'
        Resource: !GetAtt eventlyTable.Arn
  getItemsByOwner:
      name: get-items-by-owner
      handler: src/lambdas/getItemsById/function.handler
      description: Get Items from repository by eventOwner.
      memorySize: 128
      timeout: 5
      environment:
        tableName: ${self:custom.tableName}
        indexName: eventOwnerId
        field: eventOwnerId
      events:
        - http:
            path: item/byOwner/{id}
            method: GET
      iamRoleStatements:
        - Effect: 'Allow'
          Action:
            - 'DynamoDB:GetItem'
          Resource: !GetAtt eventlyTable.Arn
  getItemsByUser:
      name: get-items-by-owner
      handler: src/lambdas/getItemsById/function.handler
      description: Get Items from repository by eventOwner.
      memorySize: 128
      timeout: 5
      environment:
        tableName: ${self:custom.tableName}
        indexName: userId
        field: userId
      events:
        - http:
            path: item/byUser/{id}
            method: GET
      iamRoleStatements:
        - Effect: 'Allow'
          Action:
            - 'DynamoDB:GetItem'
          Resource: !GetAtt eventlyTable.Arn
      


package:
  patterns:
    # include
    - src/**
    # exclude
    - '!*'
    - '.dynamodb/**'
    - '.github/**'
    - '!__tests__/**'



resources:
  Description: ${self:custom.description}    

  Resources:

    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: eventOwnerId
            AttributeType: S  
          - AttributeName: userId
            AttributeType: S  
          - AttributeName: eventDateAndTime
            AttributeType: S    
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
         
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
        Tags:
          - Key: Application
            Value: ${self:service}
          - Key: Stage
            Value: ${self:provider.stage}
          - Key: StackName
            Value: !Ref AWS::StackId

        GlobalSecondaryIndexes:
          - IndexName: eventOwnerId
            KeySchema:
              - AttributeName: eventOwnerId
                KeyType: HASH
              - AttributeName: eventDateAndTime
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: userId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: eventDateAndTime
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

